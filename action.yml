name: 'alr install'
description: 'Install using `alr install`'
author: 'Alire Project'

inputs:
  crates:
    description: 'Crates to install, accepts version sets, e.g.: hello^2'
    required: true
    default: ''
  prefix:
    description: Location for the installation, will contain `<prefix>/bin` and so on
    required: false
    default: alire_prefix
  force:
    description: use `alr --force` during install
    required: false
    default: false
  add_to_path:
    description: Whether to add the prefix to path
    required: false
    default: true
  clean:
    description: Whether to remove alr afterwards, if it wasn't originally installed
    required: false
    default: true
  cache:
    description: Whether to reuse a cached previous install
    required: false
    default: true
  extra_index:
    description: URL to an extra index if needed
    required: false
    default: ''

runs:
  using: "composite"
  steps:

    - name: Find alr in path
      id: find-alr
      shell: bash
      run: |
        which alr && echo "available=true" >> $GITHUB_OUTPUT || echo "available=false" >> $GITHUB_OUTPUT

    - name: Set up alr
      if: steps.find-alr.outputs.available != 'true'
      uses: alire-project/setup-alire@v3
      with:
        cache: ${{inputs.cache}}

    - name: Prepare --force
      id: force
      shell: bash
      run: |
        if [[ "${{inputs.force}}" != "false" ]]; then
          echo "force=--force" >> $GITHUB_OUTPUT
        else
          echo "force=" >> $GITHUB_OUTPUT
        fi

    - name: Prepare cache milestones
      id: find-versions
      shell: bash
      run: |
        versions=""
        for crate in ${{inputs.crates}}; do
          versions+=":"$(alr show ${crate} | head -1 | cut -f1 -d:)
        done
        echo Versions are: $versions
        echo "milestones=$versions" >> $GITHUB_OUTPUT

    - name: Prepare cache id
      id: cache-key
      shell: bash
      run: |
        echo "key=[alr-install][${{runner.os}}][${{runner.arch}}][${{inputs.prefix}}][${{steps.find-versions.outputs.milestones}}]" >> $GITHUB_OUTPUT

    - name: Reuse cached installation
      if: inputs.cache == 'true'
      id: cache-install
      uses: actions/cache@v4
      with:
        path: |
          ${{inputs.prefix}}
        key: ${{steps.cache-key.outputs.key}}

    - name: Diagnose cache usage
      shell: bash
      run: |
        echo "alr-install cache requested: ${{inputs.cache}}"
        echo "alr-install cache hit: ${{steps.cache-install.outputs.cache-hit}}"
        echo "alr-install cache key: ${{steps.cache-key.outputs.key}}"

    - name: Run `alr index --add=${{inputs.extra_index}}`
      if: inputs.extra_index != ''
      shell: bash
      run: |
        alr index --reset-community
        alr settings --global --set dependencies.shared False
        alr index --add=${{inputs.extra_index}} --before=community --name=extra

    - name: Run `alr install`
      if: inputs.cache != 'true' || steps.cache-install.outputs.cache-hit != 'true'
      shell: bash
      run: |
        alr -d ${{steps.force.outputs.force}} install ${{inputs.crates}} --prefix ${{inputs.prefix}}

    - name: Show prefix info
      shell: bash
      run: |
        alr install --prefix ${{inputs.prefix}} --info

    - name: Add to path (Windows)
      if: inputs.add_to_path == 'true' && runner.os == 'Windows'
      shell: pwsh
      run: |
        $Target = Resolve-Path ${{inputs.prefix}}\bin
        Add-Content $env:GITHUB_PATH $Target

    - name: Add to path (!Windows)
      if: inputs.add_to_path == 'true' && runner.os != 'Windows'
      shell: bash
      run: |
        readlink -f "${{inputs.prefix}}/bin" >> $GITHUB_PATH

    - name: Cleanup
      if: inputs.clean == 'true' && steps.find-alr.outputs.available != 'true'
      shell: bash
      run: rm -rf alire_install